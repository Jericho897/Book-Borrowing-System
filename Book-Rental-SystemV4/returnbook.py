# Form implementation generated from reading ui file 'returnbook.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import sqlite3

from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import QDate
from PyQt6.QtWidgets import QCalendarWidget, QDialog, QMessageBox


class ReturnBookDialog(object):
    def setupUi(self, ReturnDialog):
        self.dialog = ReturnDialog
        ReturnDialog.setObjectName("ReturnDialog")
        ReturnDialog.resize(592, 334)
        ReturnDialog.setStyleSheet("background:rgb(72, 72, 72)")
        self.frame = QtWidgets.QFrame(parent=ReturnDialog)
        self.frame.setGeometry(QtCore.QRect(0, -6, 601, 71))
        font = QtGui.QFont()
        font.setFamily("Nirmala UI")
        font.setBold(True)
        font.setWeight(75)
        self.frame.setFont(font)
        self.frame.setStyleSheet("background-color: rgb(50, 50, 50);")
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.label = QtWidgets.QLabel(parent=self.frame)
        self.label.setGeometry(QtCore.QRect(210, 10, 191, 51))
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("color:white;")
        self.label.setObjectName("label")

        self.label_7 = QtWidgets.QLabel(parent=ReturnDialog)
        self.label_7.setGeometry(QtCore.QRect(79, 164, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.label_7.setFont(font)
        self.label_7.setStyleSheet("color:white;")
        self.label_7.setAlignment(
            QtCore.Qt.AlignmentFlag.AlignLeading | QtCore.Qt.AlignmentFlag.AlignLeft | QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_7.setObjectName("label_7")
        self.borrowedbook = QtWidgets.QComboBox(parent=ReturnDialog)
        self.borrowedbook.setGeometry(QtCore.QRect(180, 84, 371, 22))
        self.borrowedbook.setStyleSheet(" background: white; color: black;;")
        self.borrowedbook.setObjectName("borrowedbook")
        self.label_8 = QtWidgets.QLabel(parent=ReturnDialog)
        self.label_8.setGeometry(QtCore.QRect(340, 170, 21, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.label_8.setFont(font)
        self.label_8.setStyleSheet("color:white;")
        self.label_8.setAlignment(
            QtCore.Qt.AlignmentFlag.AlignLeading | QtCore.Qt.AlignmentFlag.AlignLeft | QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_8.setObjectName("label_8")
        self.due_Date = QtWidgets.QPushButton(parent=ReturnDialog)
        self.due_Date.setGeometry(QtCore.QRect(183, 170, 141, 31))
        font = QtGui.QFont()
        font.setFamily("Nirmala UI")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.due_Date.setFont(font)
        self.due_Date.setStyleSheet("QPushButton {\n"
                                    "                background-color: rgb(255, 170, 0);\n"
                                    "                color: white;\n"
                                    "                border: none;\n"
                                    "                border-radius: 5px;\n"
                                    "                padding: 10px;\n"
                                    "            }\n"
                                    "            QPushButton:hover {\n"
                                    "                background-color: rgb(255, 196, 78);\n"
                                    "            }")
        self.due_Date.setFlat(False)
        self.due_Date.setObjectName("dueDate")
        self.return_date = QtWidgets.QPushButton(parent=ReturnDialog)
        self.return_date.setGeometry(QtCore.QRect(370, 169, 141, 31))
        font = QtGui.QFont()
        font.setFamily("Nirmala UI")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.return_date.setFont(font)
        self.return_date.setStyleSheet("QPushButton {\n"
                                       "                background-color: rgb(76, 94, 255);\n"
                                       "                color: white;\n"
                                       "                border: none;\n"
                                       "                border-radius: 5px;\n"
                                       "                padding: 10px;\n"
                                       "            }\n"
                                       "            QPushButton:hover {\n"
                                       "                background-color:rgb(106, 153, 255);\n"
                                       "            }")
        self.return_date.setFlat(False)
        self.return_date.setObjectName("returnDate")
        self.ConfirmReturn = QtWidgets.QPushButton(parent=ReturnDialog)
        self.ConfirmReturn.setGeometry(QtCore.QRect(70, 270, 221, 40))
        font = QtGui.QFont()
        font.setFamily("Nirmala UI")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.ConfirmReturn.setFont(font)
        self.ConfirmReturn.setStyleSheet("QPushButton {\n"
                                         "                background-color: rgb(6, 217, 66);\n"
                                         "                color: white;\n"
                                         "                border: none;\n"
                                         "                border-radius: 5px;\n"
                                         "                padding: 10px;\n"
                                         "            }\n"
                                         "            QPushButton:hover {\n"
                                         "                background-color: rgb(50, 255, 100);\n"
                                         "            }")
        self.ConfirmReturn.setFlat(False)
        self.ConfirmReturn.setObjectName("ConfirmReturn")
        self.label_4 = QtWidgets.QLabel(parent=ReturnDialog)
        self.label_4.setGeometry(QtCore.QRect(39, 79, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.label_4.setFont(font)
        self.label_4.setStyleSheet("color:white;")
        self.label_4.setAlignment(
            QtCore.Qt.AlignmentFlag.AlignLeading | QtCore.Qt.AlignmentFlag.AlignLeft | QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_4.setObjectName("label_4")
        self.Cancel = QtWidgets.QPushButton(parent=ReturnDialog)
        self.Cancel.setGeometry(QtCore.QRect(320, 270, 231, 40))
        font = QtGui.QFont()
        font.setFamily("Nirmala UI")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.Cancel.setFont(font)
        self.Cancel.setStyleSheet("QPushButton {\n"
                                  "                background-color: rgb(200, 46, 18);\n"
                                  "                color: white;\n"
                                  "                border: none;\n"
                                  "                border-radius: 5px;\n"
                                  "                padding: 10px;\n"
                                  "            }\n"
                                  "            QPushButton:hover {\n"
                                  "                background-color: rgb(255, 100, 100);\n"
                                  "            }")
        self.Cancel.setObjectName("Cancel")
        self.label_5 = QtWidgets.QLabel(parent=ReturnDialog)
        self.label_5.setGeometry(QtCore.QRect(80, 110, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.label_5.setFont(font)
        self.label_5.setStyleSheet("color:white;")
        self.label_5.setAlignment(
            QtCore.Qt.AlignmentFlag.AlignLeading | QtCore.Qt.AlignmentFlag.AlignLeft | QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label_5.setObjectName("label_5")
        self.customer = QtWidgets.QComboBox(parent=ReturnDialog)
        self.customer.setGeometry(QtCore.QRect(180, 126, 371, 22))
        self.customer.setStyleSheet(" background: white; color: black;")
        self.customer.setFrame(False)
        self.customer.setObjectName("customer")

        self.retranslateUi(ReturnDialog)
        QtCore.QMetaObject.connectSlotsByName(ReturnDialog)
        self.borrowedbook.currentIndexChanged.connect(self.on_borrowed_book_selected)

        # Set default return date to the current date
        current_date = QDate.currentDate()
        formatted_current_date = current_date.toString(QtCore.Qt.DateFormat.ISODate)
        self.return_date.setText(formatted_current_date)
        
        self.ConfirmReturn.clicked.connect(self.confirm_return_book)
        self.Cancel.clicked.connect(self.dialog.close)

        self.populate_borrowed_books()
        

    def retranslateUi(self, ReturnDialog):
        _translate = QtCore.QCoreApplication.translate
        ReturnDialog.setWindowTitle(_translate("ReturnDialog", "Return Book"))
        self.label.setText(_translate("ReturnDialog", "Return Book"))
        self.label_7.setText(_translate("ReturnDialog", "Rent Date:"))
        self.label_8.setText(_translate("ReturnDialog", "to"))
        self.ConfirmReturn.setText(_translate("ReturnDialog", "Return"))
        self.label_4.setText(_translate("ReturnDialog", "Borrowed Book"))
        self.Cancel.setText(_translate("ReturnDialog", "Cancel"))
        self.label_5.setText(_translate("ReturnDialog", "Customer:"))
        self.due_Date.setText(_translate("ReturnDialog", "Due Date"))
        self.return_date.setText(_translate("ReturnDialog", "Return Date"))

   
    def populate_borrowed_books(self):
        try:
            # Connect to the database
            conn = sqlite3.connect('library.db')
            cursor = conn.cursor()

            # Fetch book titles from the books table with Status "Rented"
            cursor.execute("SELECT Title FROM books WHERE Status = 'Rented'")
            books = cursor.fetchall()

            # Populate the borrowedbook combobox with the fetched titles
            for book in books:
                self.borrowedbook.addItem(book[0])

                # Call populate_customers() with the selected book title
                self.populate_customers(book[0])  # Pass the selected book title

            # Close the database connection
            conn.close()
        except sqlite3.Error as e:
            print("An error occurred while populating borrowed books:", e)

    def populate_customers(self, selected_book_title):
        try:
            # Connect to the database
            conn = sqlite3.connect('library.db')
            cursor = conn.cursor()

            # Fetch the customer name of the current book rental
            cursor.execute("""
                SELECT c.Name 
                FROM customers c
                INNER JOIN rentals r ON c.CustomerID = r.CustomerID
                INNER JOIN books b ON r.BookID = b.BookID
                WHERE b.Title = ?
            """, (selected_book_title,))
            current_customer = cursor.fetchone()

            if current_customer:
                # Clear combobox and add the current customer
                self.customer.clear()
                self.customer.addItem(current_customer[0])

                # Disable editing
                self.customer.setDisabled(True)

            # Close the database connection
            conn.close()
        except sqlite3.Error as e:
            print("An error occurred while populating customers:", e)

    def get_rental_due_date(self, book_title):
        try:
            # Connect to the database
            conn = sqlite3.connect('library.db')
            cursor = conn.cursor()

            # Fetch rental due date from rentals table based on the selected book title
            cursor.execute(
                "SELECT RentalDueDate FROM rentals WHERE BookID = (SELECT BookID FROM books WHERE Title = ?)",
                (book_title,))
            rental_due_date = cursor.fetchone()

            # Close the database connection
            conn.close()

            # Return the fetched rental due date
            if rental_due_date:
                return rental_due_date[0]
            else:
                return "No due date found"
        except sqlite3.Error as e:
            print("An error occurred while fetching rental due date:", e)
            return None

    def on_borrowed_book_selected(self):
        current_book_title = self.borrowedbook.currentText()
        rental_due_date = self.get_rental_due_date(current_book_title)
        self.due_Date.setText(rental_due_date)
        
        # Populate customers for the selected book
        self.populate_customers(current_book_title)

    def select_return_date(self):
        try:
            # Create a calendar dialog
            calendar_dialog = QDialog()
            calendar_dialog.setWindowTitle("Select Return Date")
            calendar = QCalendarWidget(calendar_dialog)
            calendar.setGeometry(10, 10, 400, 250)

            # Create a button to confirm the date selection
            select_button = QtWidgets.QPushButton("Select Date", calendar_dialog)
            select_button.setGeometry(150, 270, 100, 30)
            select_button.clicked.connect(lambda: self.on_returnDate_selected(calendar, calendar_dialog))

            # Show the calendar dialog
            calendar_dialog.exec()
        except Exception as e:
            print(e)

    def on_returnDate_selected(self, calendar, dialog):
        # Get the selected date from the calendar widget
        selected_date = calendar.selectedDate()

        # If no date is selected, return without setting the button text
        if not selected_date.isValid():
            return

        # Format the selected date as a string
        formatted_date = selected_date.toString(QtCore.Qt.DateFormat.ISODate)

        # Set the selected date as the text of the return date button
        self.return_date.setText(formatted_date)

        # Store the selected return date in a class variable for later use
        self.selected_return_date = formatted_date

        # Close the dialog
        dialog.accept()

    def get_rental_fee(self, book_title):
        try:
            # Create connection to database
            conn = sqlite3.connect("library.db")
            c = conn.cursor()

            # Fetch the rental fee from the database based on the book title
            c.execute("SELECT RentalFee FROM books WHERE Title = ?", (book_title,))
            result = c.fetchone()

            if result:
                rental_fee = result[0]
                conn.close()
                return rental_fee
            else:
                print("No rental fee found for book:", book_title)
                conn.close()
                return None

        except sqlite3.Error as e:
            print("Error fetching rental fee:", e)
            return None

    def confirm_return_book(self):
        try:
            # Connect to the database
            conn = sqlite3.connect('library.db')
            cursor = conn.cursor()

            # Fetch necessary data
            book_title = self.borrowedbook.currentText()
            customer_name = self.customer.currentText()
            return_date = QDate.fromString(self.selected_return_date, QtCore.Qt.DateFormat.ISODate)

            # Get Book ID and Customer ID
            cursor.execute("SELECT BookID FROM books WHERE Title = ?", (book_title,))
            book_id = cursor.fetchone()[0]

            cursor.execute("SELECT CustomerID FROM customers WHERE Name = ?", (customer_name,))
            customer_id = cursor.fetchone()[0]

            # Get Rental Due Date
            cursor.execute("SELECT RentalDueDate FROM rentals WHERE BookID = ?", (book_id,))
            rental_due_date_str = cursor.fetchone()[0]
            rental_due_date = QDate.fromString(rental_due_date_str, QtCore.Qt.DateFormat.ISODate)

            # Get Rental Fee (assuming there's a method to get the rental fee based on BookID)
            rental_fee = self.get_rental_fee(book_title)

            # Calculate the number of days overdue
            if return_date > rental_due_date:
                days_overdue = max(0, rental_due_date.daysTo(return_date))
                print(days_overdue)
            else:
                days_overdue = 0
                print(days_overdue)
            # Calculate the overdue fee
            overdue_fee = max(0, days_overdue) * (rental_fee * 2)
            print(overdue_fee)

            # Insert the return record
            cursor.execute(
                "INSERT INTO returns (CustomerId, BookId, ReturnDate, RentalDueDate, OverdueFee) VALUES (?, ?, ?, ?, ?)",
                (customer_id, book_id, return_date.toString(QtCore.Qt.DateFormat.ISODate),
                 rental_due_date.toString(QtCore.Qt.DateFormat.ISODate), overdue_fee)
            )

            # Update the status of the book to 'Available'
            cursor.execute("UPDATE books SET Status = 'Available' WHERE BookID = ?", (book_id,))

            conn.commit()
            conn.close()
            self.dialog.accept()
            QMessageBox.information(None, "Return Book",
                                    f"Returned by {customer_name} on {return_date.toString(QtCore.Qt.DateFormat.ISODate)} with overdue fee {overdue_fee}")

        except sqlite3.Error as e:
            print('Error returning book:', e)
            QMessageBox.critical(None, "Error", f"Error returning book: {e}")
